# ... (previous imports and setup)

# Modify the user_trials structure to only track OpenAI trials
user_trials = {}

@app.route('/generate-pitches', methods=['POST'])
def api_generate_pitches():
    try:
        data = request.json if request.is_json else request.form
        resume = data.get('resume', '')
        job_description = data.get('jobDescription', '')
        api_type = data.get('apiType', 'openai')
        user_api_key = data.get('apiKey', '')
        model_name = data.get('modelName', 'meta-llama/Meta-Llama-3-70B-Instruct')
        user_id = data.get('userId', '')
        dev_key = data.get('devKey', '')

        is_dev_mode = dev_key == DEV_SECRET

        # Handle file uploads for resume and job description
        if 'resumeFile' in request.files:
            pdf_file = request.files['resumeFile'].read()
            resume_text = extract_text_from_pdf(pdf_file)
            if resume_text is None:
                return jsonify({"error": "Failed to read resume PDF file"}), 400
            resume = resume_text

        if 'jobDescriptionFile' in request.files:
            pdf_file = request.files['jobDescriptionFile'].read()
            job_description_text = extract_text_from_pdf(pdf_file)
            if job_description_text is None:
                return jsonify({"error": "Failed to read job description PDF file"}), 400
            job_description = job_description_text

        if not job_description or not resume:
            return jsonify({"error": "Both job description and resume are required"}), 400

        if not user_id:
            return jsonify({"error": "User ID is required"}), 400

        # Initialize user trials if not exists
        if user_id not in user_trials:
            user_trials[user_id] = 0

        # Check for OpenAI trial usage
        if api_type == 'openai' and not user_api_key:
            if user_trials[user_id] >= 3 and not is_dev_mode:
                return jsonify({"error": "Free trials for OpenAI API exhausted. Please provide your own API key."}), 403
            user_trials[user_id] += 1
            api_key = OPENAI_API_KEY
        elif api_type == 'openai':
            api_key = user_api_key
        elif api_type == 'hf':
            if not user_api_key:
                return jsonify({"error": "Hugging Face token is required"}), 400
            api_key = user_api_key
        else:
            return jsonify({"error": "Invalid API type"}), 400

        # Generate pitches based on API type
        if api_type == 'openai':
            pitches = generate_pitches_openai(api_key, resume, job_description)
        else:
            pitches = generate_pitches_hf(resume, job_description, model_name, api_key)

        return jsonify({
            "pitches": pitches,
            "devMode": is_dev_mode,
            "trialsRemaining": max(0, 3 - user_trials[user_id]) if api_type == 'openai' else 0
        })
    except Exception as e:
        print(f"Unexpected error: {str(e)}")
        print(traceback.format_exc())
        return jsonify({"error": f"An unexpected error occurred: {str(e)}"}), 500

# ... (rest of the file remains the same)